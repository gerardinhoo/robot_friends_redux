{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","username","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","cardArrays","map","robot","i","components_Card","key","SearchBox","searchfield","searchChange","arial-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","color","onClick","Component","Header","components_CounterButton","ErrorBoundry","hasError","error","info","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0057bfb8.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ username, email, id }) => {\n  return (\n    <div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\n      <h2>{username}</h2>\n      <p className=\"EmailFont\">{email}</p>\n    </div>\n  )\n   \n}\n\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n  console.log('CardList')\n  const cardArrays = robots.map((robot, i) => {\n    return  (\n      <Card\n        key={i}\n        id={robots[i].id}\n        username={robots[i].username}\n        email={robots[i].email}\n      />\n    );\n  })\n  \n  return (\n    <div>\n      {cardArrays}\n    </div>\n  )\n}\n\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox')\n  return (\n    <div className=\"pa4\">\n      <input\n        arial-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\" \n        type=\"search\" \n        placeholder=\"Search Names\" \n        onChange= { searchChange }\n      />\n    </div>\n  );\n}\n\n\nexport default SearchBox;\n\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '4px solid blue', height: '700px'}}>\n      {props.children}\n    </div>\n  )\n}\n\n\nexport default Scroll;","import React, { Component } from \"react\";\n\n// How to handle unecessary update on your react app\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true\n    }\n    return false\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: this.state.count + 1 };\n    })\n  };\n\n  render() {\n    console.log(\"CounterButton\");\n    return (\n      <button color={this.props.color} onClick={this.updateCount} >\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';  \n\n// How to handle unecessary update on your react app\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    console.log('Header')\n    return (\n      <div>\n        <h1 className='f1'>RobotFriends</h1>\n        <CounterButton color={'red'} />\n       </div>\n    );\n  }\n}\n\n\nexport default Header;","import React, { Component } from \"react\";\n\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That's not good</h1>\n    }\n    return this.props.children\n  }\n}\n\n\nexport default ErrorBoundry;","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport Header from \"../components/Header\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from '../actions';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.username.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? \n    <h1>Loading...</h1> :\n     (\n       <div className=\"App\">\n          <Header />\n          <SearchBox searchChange= { onSearchChange } />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={ filteredRobots } />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n         CHANGE_SEARCH_FIELD, \n         REQUEST_ROBOTS_PENDING,\n         REQUEST_ROBOTS_SUCCESS,\n         REQUEST_ROBOTS_FAILED,\n        } from './constants';\n\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants';\n\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD :\n      return Object.assign({}, state, {searchField: action.payload});\n    default: \n      return state;\n  }\n}\n\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true })\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false })\n    default:\n      return state;\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\n\n\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}